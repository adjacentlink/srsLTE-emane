diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4aa6d967..ccdd5c74 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -238,7 +238,7 @@ macro(ADD_CXX_COMPILER_FLAG_IF_AVAILABLE flag have)
 endmacro(ADD_CXX_COMPILER_FLAG_IF_AVAILABLE)
 
 if(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=${GCC_ARCH} -Wall -Wno-comment -Wno-reorder -Wno-unused-but-set-variable -Wno-unused-variable -Wformat -std=c++11")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=${GCC_ARCH} -Wall -Wno-comment -Wno-reorder -Wno-unused-but-set-variable -Wno-unused-variable -Wformat -std=c++03")
 
   find_package(SSE)
   if (HAVE_AVX2)
diff --git a/emu_srsenb/hdr/phy/phch_worker.h b/emu_srsenb/hdr/phy/phch_worker.h
index 672bb4d7..9821a2d1 100644
--- a/emu_srsenb/hdr/phy/phch_worker.h
+++ b/emu_srsenb/hdr/phy/phch_worker.h
@@ -70,8 +70,8 @@ public:
   
 private: 
   
-  constexpr static float PUSCH_RL_SNR_DB_TH = 1.0; 
-  constexpr static float PUCCH_RL_CORR_TH = 0.1; 
+  const static float PUSCH_RL_SNR_DB_TH = 1.0; 
+  const static float PUCCH_RL_CORR_TH = 0.1; 
   
   void work_imp();
   
diff --git a/emu_srsue/hdr/phy/phch_recv.h b/emu_srsue/hdr/phy/phch_recv.h
index 73384c16..f18f5283 100644
--- a/emu_srsue/hdr/phy/phch_recv.h
+++ b/emu_srsue/hdr/phy/phch_recv.h
@@ -259,7 +259,7 @@ private:
   };
 
   // 36.133 9.1.2.1 for band 7
-  constexpr static float ABSOLUTE_RSRP_THRESHOLD_DBM = -125;
+  const static float ABSOLUTE_RSRP_THRESHOLD_DBM = -125;
 
 
   // Objects for internal use
diff --git a/emu_srsue/src/phy/phch_worker.cc b/emu_srsue/src/phy/phch_worker.cc
index 7b8334d0..47f492e3 100644
--- a/emu_srsue/src/phy/phch_worker.cc
+++ b/emu_srsue/src/phy/phch_worker.cc
@@ -26,7 +26,6 @@
 
 #include <unistd.h>
 #include <string.h>
-#include <cmath>
 #include "emu_srsue/hdr/phy/phch_worker.h"
 #include "srslte/srslte.h"
 #include "srslte/interfaces/ue_interfaces.h"
@@ -257,7 +256,7 @@ void phch_worker::work_imp()
 
   // Average RSSI over all symbols (make sure SF length is non-zero)
   float rssi_dbm = SRSLTE_SF_LEN_PRB(cell.nof_prb) > 0 ? (10*log10(srslte_vec_avg_power_cf(signal_buffer[0], SRSLTE_SF_LEN_PRB(cell.nof_prb))) + 30) : 0;
-  if (std::isnormal(rssi_dbm)) {
+  if (isnormal(rssi_dbm)) {
     phy->avg_rssi_dbm = SRSLTE_VEC_EMA(rssi_dbm, phy->avg_rssi_dbm, phy->args->snr_ema_coeff);
   }
 
@@ -1399,7 +1398,7 @@ void phch_worker::update_measurements()
     
     // Average RSRQ
     float rsrq_db = 10*log10(srslte_chest_dl_get_rsrq(&ue_dl.chest));
-    if (std::isnormal(rsrq_db)) {
+    if (isnormal(rsrq_db)) {
       if (!phy->avg_rsrq_db) {
         phy->avg_rsrq_db = SRSLTE_VEC_EMA(rsrq_db, phy->avg_rsrq_db, snr_ema_coeff);
       } else {
@@ -1409,7 +1408,7 @@ void phch_worker::update_measurements()
 
     // Average RSRP
     float rsrp_lin = srslte_chest_dl_get_rsrp(&ue_dl.chest);
-    if (std::isnormal(rsrp_lin)) {
+    if (isnormal(rsrp_lin)) {
       if (!phy->avg_rsrp) {
         phy->avg_rsrp = SRSLTE_VEC_EMA(rsrp_lin, phy->avg_rsrp, snr_ema_coeff);
       } else {
@@ -1438,7 +1437,7 @@ void phch_worker::update_measurements()
 
     // Average noise 
     float cur_noise = srslte_chest_dl_get_noise_estimate(&ue_dl.chest);
-    if (std::isnormal(cur_noise)) {
+    if (isnormal(cur_noise)) {
       if (!phy->avg_noise) {  
         phy->avg_noise = cur_noise;          
       } else {
diff --git a/lib/include/emu_srslte/msg_format_utils.h b/lib/include/emu_srslte/msg_format_utils.h
index 7bb692f7..e32ba5b8 100644
--- a/lib/include/emu_srslte/msg_format_utils.h
+++ b/lib/include/emu_srslte/msg_format_utils.h
@@ -6,7 +6,7 @@
 #include "srslte/interfaces/enb_interfaces.h"
 
 #include <string>
-#include <iostream>
+#include <sstream>
 #include <iomanip>
 
 namespace {
@@ -53,7 +53,7 @@ inline std::string dci_format_to_string(srslte_dci_format_t arg)
        case SRSLTE_DCI_FORMAT2B:
         return "Format2B";
        default:
-        return "InvalidDCIFormat " + std::to_string(arg);
+        return "InvalidDCIFormat";
     }
 }
  
@@ -69,14 +69,14 @@ inline std::string ra_alloc_type_to_string(srslte_ra_type_t arg)
      case   SRSLTE_RA_ALLOC_TYPE2:
       return  "Type2";
     default:
-     return "InvalidAllocType " + std::to_string(arg);
+     return "InvalidAllocType";
    }
 }
 
 
 inline std::string dl_dci_to_string(const srslte_ra_dl_dci_t * arg)
 {
-  char buf[256]{};
+  char buf[256] = {0};
   
   int len = snprintf(buf, sizeof(buf), "alloc %s, harqp %u, mcs_idx (%u, %u), rv_idx (%d,%d), ndi(%d, %d), tpc_pucch %hhu, ra_pre %u, ra_midx %u", 
                      ra_alloc_type_to_string(arg->alloc_type).c_str(),
@@ -97,7 +97,7 @@ inline std::string dl_dci_to_string(const srslte_ra_dl_dci_t * arg)
 
 inline std::string dci_location_to_string(const srslte_dci_location_t * arg)
 {
-  char buf[64]{};
+  char buf[64] = {0};
   
   snprintf(buf, sizeof(buf), "level %u, ncce %u", arg->L, arg->ncce);
 
@@ -109,7 +109,7 @@ inline std::string dci_location_to_string(const srslte_dci_location_t * arg)
 
 inline std::string dci_rar_grant_to_string(const srslte_dci_rar_grant_t * arg)
 {
-  char buf[256]{};
+  char buf[256] = {0};
   
   int len = snprintf(buf, sizeof(buf), "rba %u, trunc_mcs %u, tpc_pusch %u, ul_delay %d, cqi_request %d, hopping_flag %d",
                      arg->rba,
@@ -123,12 +123,11 @@ inline std::string dci_rar_grant_to_string(const srslte_dci_rar_grant_t * arg)
 }
 
 
-// see include/srslte/interfaces/sched_interface.h 
-//     include/srslte/phy/enb/enb_dl.h
+// see lib/include/srslte/interfaces/sched_interface.h  lib/include/srslte/phy/enb/enb_dl.h
 inline std::string format_to_string(const srsenb::mac_interface_phy::dl_sched_t   * dl_sched,
                                     const srsenb::sched_interface::dl_sched_res_t * sched_result)
 {
-  char buf[4096]{};
+  char buf[4096] = {0};
 
   int len = snprintf(buf, sizeof(buf), "cfi %u, nof_grants %u, nof_data %u, nof_rar %u, nof_bc %u",
                      dl_sched->cfi,
@@ -142,22 +141,20 @@ inline std::string format_to_string(const srsenb::mac_interface_phy::dl_sched_t
   // Data
   for(uint32_t idx = 0; idx < sched_result->nof_data_elems; ++idx)
    {
-      const auto & entry = sched_result->data[idx];
+      const srsenb::sched_interface::dl_sched_data_t & data = sched_result->data[idx];
 
       len += snprintf(buf + len, sizeof(buf) - len, "\n\t\tDATA: rnti 0x%hx, dci_format %s, dci %s, dci_location %s",
-                      entry.rnti,
-                      dci_format_to_string(entry.dci_format).c_str(),
-                      dl_dci_to_string(&entry.dci).c_str(),
-                      dci_location_to_string(&entry.dci_location).c_str());
+                      data.rnti,
+                      dci_format_to_string(data.dci_format).c_str(),
+                      dl_dci_to_string(&data.dci).c_str(),
+                      dci_location_to_string(&data.dci_location).c_str());
 
       for(uint32_t tb = 0; tb < SRSLTE_MAX_TB; ++tb)
        {
-         const auto & data = sched_result->data[idx];
-
          len += snprintf(buf + len, sizeof(buf) - len, "\n\t\t\ttb %u, tbs %u, nof_pdu %u \n%s",
                          tb,
                          data.tbs[tb],
-                         entry.nof_pdu_elems[tb],
+                         data.nof_pdu_elems[tb],
                          hex_string(dl_sched->sched_grants[n].data[tb], data.tbs[tb]).c_str());
        }
    }
@@ -165,19 +162,19 @@ inline std::string format_to_string(const srsenb::mac_interface_phy::dl_sched_t
   // RAR
   for(uint32_t idx = 0; idx < sched_result->nof_rar_elems; ++idx)
    {
-      const auto & entry = sched_result->rar[idx];
+      const srsenb::sched_interface::dl_sched_rar_t & data = sched_result->rar[idx];
 
       len += snprintf(buf + len, sizeof(buf) - len, "\n\t\tRAR: rarnti 0x%hx, tbs %u, dci %s, dci_location %s, nof_grants %u\n%s",
-                      entry.rarnti,
-                      entry.tbs,
-                      dl_dci_to_string(&entry.dci).c_str(),
-                      dci_location_to_string(&entry.dci_location).c_str(),
-                      entry.nof_grants,
-                      hex_string(dl_sched->sched_grants[n].data[0], entry.tbs).c_str());
-
-      for(uint32_t num = 0; num < entry.nof_grants; ++num)
+                      data.rarnti,
+                      data.tbs,
+                      dl_dci_to_string(&data.dci).c_str(),
+                      dci_location_to_string(&data.dci_location).c_str(),
+                      data.nof_grants,
+                      hex_string(dl_sched->sched_grants[n].data[0], data.tbs).c_str());
+
+      for(uint32_t num = 0; num < data.nof_grants; ++num)
        {
-         const auto & grant = entry.grants[num];
+         const srsenb::sched_interface::dl_sched_rar_grant_t & grant = data.grants[num];
  
          len += snprintf(buf + len, sizeof(buf) - len, "\n\t\t\t ra_id %u, grant %s",
                          grant.ra_id,
@@ -188,15 +185,15 @@ inline std::string format_to_string(const srsenb::mac_interface_phy::dl_sched_t
   // BC 
   for(uint32_t idx = 0; idx < sched_result->nof_bc_elems; ++idx)
    {
-      const auto & entry = sched_result->bc[idx];
+      const srsenb::sched_interface::dl_sched_bc_t & data = sched_result->bc[idx];
 
       len += snprintf(buf + len, sizeof(buf) - len, "\n\t\tBC: index %u, tbs %u, dci %s, dci_location %s, type %s\n%s",
-                      entry.index,
-                      entry.tbs,
-                      dl_dci_to_string(&entry.dci).c_str(),
-                      dci_location_to_string(&entry.dci_location).c_str(),
-                      entry.type == srsenb::sched_interface::dl_sched_bc_t::BCCH ? "BCCH" : "PCCH",
-                      hex_string(dl_sched->sched_grants[n].data[0], entry.tbs).c_str());
+                      data.index,
+                      data.tbs,
+                      dl_dci_to_string(&data.dci).c_str(),
+                      dci_location_to_string(&data.dci_location).c_str(),
+                      data.type == srsenb::sched_interface::dl_sched_bc_t::BCCH ? "BCCH" : "PCCH",
+                      hex_string(dl_sched->sched_grants[n].data[0], data.tbs).c_str());
    }
 
   return buf;
diff --git a/lib/include/srslte/radio/radio.h b/lib/include/srslte/radio/radio.h
index 096194b8..26775777 100644
--- a/lib/include/srslte/radio/radio.h
+++ b/lib/include/srslte/radio/radio.h
@@ -152,13 +152,13 @@ namespace srslte {
       // Define default values for known radios
       bool tx_adv_auto;
       bool tx_adv_negative; 
-      constexpr static double uhd_default_burst_preamble_sec = 600*1e-6;
-      constexpr static double uhd_default_tx_adv_samples     = 98;
-      constexpr static double uhd_default_tx_adv_offset_sec  = 4*1e-6; 
+      const static double uhd_default_burst_preamble_sec = 600*1e-6;
+      const static double uhd_default_tx_adv_samples     = 98;
+      const static double uhd_default_tx_adv_offset_sec  = 4*1e-6; 
       
-      constexpr static double blade_default_burst_preamble_sec = 0.0;
-      constexpr static double blade_default_tx_adv_samples     = 27;
-      constexpr static double blade_default_tx_adv_offset_sec  = 1e-6;
+      const static double blade_default_burst_preamble_sec = 0.0;
+      const static double blade_default_tx_adv_samples     = 27;
+      const static double blade_default_tx_adv_offset_sec  = 1e-6;
 
       double tx_freq, rx_freq, freq_offset;
       
diff --git a/lib/include/srslte/srslte.h b/lib/include/srslte/srslte.h
index 6df9ee93..f87a1bf2 100644
--- a/lib/include/srslte/srslte.h
+++ b/lib/include/srslte/srslte.h
@@ -28,13 +28,13 @@
 #ifndef SRSLTE_SRSLTE_H
 #define SRSLTE_SRSLTE_H
 
-#include <complex.h>
-#include <math.h>
-
 #ifdef __cplusplus
     extern "C" {
 #endif
       
+#include <complex.h>
+#include <math.h>
+
 #include "srslte/config.h"
 #include "srslte/version.h"
 
diff --git a/lib/src/common/log_filter.cc b/lib/src/common/log_filter.cc
index ced6c86e..a9289e3e 100644
--- a/lib/src/common/log_filter.cc
+++ b/lib/src/common/log_filter.cc
@@ -90,7 +90,7 @@ void log_filter::all_log(srslte::LOG_LEVEL_ENUM level,
     }
     ss << msg;
 
-    str_ptr s_ptr(new std::string(std::move(ss.str())));
+    str_ptr s_ptr(new std::string(ss.str()));
     logger_h->log(s_ptr);
   }
 }
@@ -131,13 +131,13 @@ void log_filter::all_log(srslte::LOG_LEVEL_ENUM level,
       ss << "             hex: " << std::min(hex_limit, size) << " of " << size << "\n";
       ss << hex_string(hex, size);
     } 
-    str_ptr s_ptr(new std::string(std::move(ss.str())));
+    str_ptr s_ptr(new std::string(ss.str()));
     logger_h->log(s_ptr);
   }
 }
 
 void log_filter::console(const char * message, ...) {
-  char     *args_msg{};
+  char     *args_msg;
   va_list   args;
   va_start(args, message);
   if(vasprintf(&args_msg, message, args) > 0)
@@ -148,7 +148,7 @@ void log_filter::console(const char * message, ...) {
 
 void log_filter::error(const char * message, ...) {
   if (level >= LOG_LEVEL_ERROR) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -159,7 +159,7 @@ void log_filter::error(const char * message, ...) {
 }
 void log_filter::warning(const char * message, ...) {
   if (level >= LOG_LEVEL_WARNING) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -170,7 +170,7 @@ void log_filter::warning(const char * message, ...) {
 }
 void log_filter::info(const char * message, ...) {
   if (level >= LOG_LEVEL_INFO) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -181,7 +181,7 @@ void log_filter::info(const char * message, ...) {
 }
 void log_filter::debug(const char * message, ...) {
   if (level >= LOG_LEVEL_DEBUG) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -193,7 +193,7 @@ void log_filter::debug(const char * message, ...) {
 
 void log_filter::error_hex(const uint8_t *hex, int size, const char * message, ...) {
   if (level >= LOG_LEVEL_ERROR) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -204,7 +204,7 @@ void log_filter::error_hex(const uint8_t *hex, int size, const char * message, .
 }
 void log_filter::warning_hex(const uint8_t *hex, int size, const char * message, ...) {
   if (level >= LOG_LEVEL_WARNING) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -215,7 +215,7 @@ void log_filter::warning_hex(const uint8_t *hex, int size, const char * message,
 }
 void log_filter::info_hex(const uint8_t *hex, int size, const char * message, ...) {
   if (level >= LOG_LEVEL_INFO) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -226,7 +226,7 @@ void log_filter::info_hex(const uint8_t *hex, int size, const char * message, ..
 }
 void log_filter::debug_hex(const uint8_t *hex, int size, const char * message, ...) {
   if (level >= LOG_LEVEL_DEBUG) {
-    char     *args_msg{};
+    char     *args_msg;
     va_list   args;
     va_start(args, message);
     if(vasprintf(&args_msg, message, args) > 0)
@@ -244,19 +244,19 @@ void log_filter::set_time_src(time_itf *source, time_format_t format) {
 std::string log_filter::now_time()
 {
   struct timeval rawtime;
-  struct tm timeinfo{};
-  char buffer[64]{};
-  char us[16]{};
+  struct tm * timeinfo;
+  char buffer[64];
+  char us[16];
 
   srslte_timestamp_t now;
   uint64_t usec_epoch;
 
   if (!time_src) {
     gettimeofday(&rawtime, NULL);
-    localtime_r(&rawtime.tv_sec, &timeinfo); //re-entrant
+    timeinfo = localtime(&rawtime.tv_sec);
 
     if (time_format == TIME) {
-      strftime(buffer, 64, "%H:%M:%S", &timeinfo);
+      strftime(buffer, 64, "%H:%M:%S", timeinfo);
       strcat(buffer, ".");
       snprintf(us, 16, "%06ld", rawtime.tv_usec);
       strcat(buffer, us);
diff --git a/srsenb/hdr/phy/phch_worker.h b/srsenb/hdr/phy/phch_worker.h
index 672bb4d7..9821a2d1 100644
--- a/srsenb/hdr/phy/phch_worker.h
+++ b/srsenb/hdr/phy/phch_worker.h
@@ -70,8 +70,8 @@ public:
   
 private: 
   
-  constexpr static float PUSCH_RL_SNR_DB_TH = 1.0; 
-  constexpr static float PUCCH_RL_CORR_TH = 0.1; 
+  const static float PUSCH_RL_SNR_DB_TH = 1.0; 
+  const static float PUCCH_RL_CORR_TH = 0.1; 
   
   void work_imp();
   
diff --git a/srsue/hdr/phy/phch_recv.h b/srsue/hdr/phy/phch_recv.h
index 73384c16..f18f5283 100644
--- a/srsue/hdr/phy/phch_recv.h
+++ b/srsue/hdr/phy/phch_recv.h
@@ -259,7 +259,7 @@ private:
   };
 
   // 36.133 9.1.2.1 for band 7
-  constexpr static float ABSOLUTE_RSRP_THRESHOLD_DBM = -125;
+  const static float ABSOLUTE_RSRP_THRESHOLD_DBM = -125;
 
 
   // Objects for internal use
diff --git a/srsue/hdr/upper/rrc.h b/srsue/hdr/upper/rrc.h
index db61c01e..ba8fdd04 100644
--- a/srsue/hdr/upper/rrc.h
+++ b/srsue/hdr/upper/rrc.h
@@ -107,7 +107,7 @@ class cell_t
   }
 
   void set_rsrp(float rsrp) {
-    if (!isnan(rsrp)) {
+    if (~isnan(rsrp)) {
       this->rsrp = rsrp;
     }
     in_sync = true;
diff --git a/srsue/src/phy/phch_worker.cc b/srsue/src/phy/phch_worker.cc
index 64984649..7ac2ed04 100644
--- a/srsue/src/phy/phch_worker.cc
+++ b/srsue/src/phy/phch_worker.cc
@@ -26,7 +26,6 @@
 
 #include <unistd.h>
 #include <string.h>
-#include <cmath>
 #include "srsue/hdr/phy/phch_worker.h"
 #include "srslte/srslte.h"
 #include "srslte/interfaces/ue_interfaces.h"
@@ -257,7 +256,7 @@ void phch_worker::work_imp()
 
   // Average RSSI over all symbols (make sure SF length is non-zero)
   float rssi_dbm = SRSLTE_SF_LEN_PRB(cell.nof_prb) > 0 ? (10*log10(srslte_vec_avg_power_cf(signal_buffer[0], SRSLTE_SF_LEN_PRB(cell.nof_prb))) + 30) : 0;
-  if (std::isnormal(rssi_dbm)) {
+  if (isnormal(rssi_dbm)) {
     phy->avg_rssi_dbm = SRSLTE_VEC_EMA(rssi_dbm, phy->avg_rssi_dbm, phy->args->snr_ema_coeff);
   }
 
@@ -1399,7 +1398,7 @@ void phch_worker::update_measurements()
     
     // Average RSRQ
     float rsrq_db = 10*log10(srslte_chest_dl_get_rsrq(&ue_dl.chest));
-    if (std::isnormal(rsrq_db)) {
+    if (isnormal(rsrq_db)) {
       if (!phy->avg_rsrq_db) {
         phy->avg_rsrq_db = SRSLTE_VEC_EMA(rsrq_db, phy->avg_rsrq_db, snr_ema_coeff);
       } else {
@@ -1409,7 +1408,7 @@ void phch_worker::update_measurements()
 
     // Average RSRP
     float rsrp_lin = srslte_chest_dl_get_rsrp(&ue_dl.chest);
-    if (std::isnormal(rsrp_lin)) {
+    if (isnormal(rsrp_lin)) {
       if (!phy->avg_rsrp) {
         phy->avg_rsrp = SRSLTE_VEC_EMA(rsrp_lin, phy->avg_rsrp, snr_ema_coeff);
       } else {
@@ -1421,7 +1420,7 @@ void phch_worker::update_measurements()
     float rsrp_dbm = 10*log10(rsrp_lin) + 30 - phy->rx_gain_offset;
 
     // Serving cell measurements are averaged over DEFAULT_MEAS_PERIOD_MS then sent to RRC
-    if (std::isnormal(rsrp_dbm)) {
+    if (isnormal(rsrp_dbm)) {
       if (!phy->avg_rsrp_dbm) {
         phy->avg_rsrp_dbm = rsrp_dbm;
       } else {
@@ -1438,7 +1437,7 @@ void phch_worker::update_measurements()
 
     // Average noise 
     float cur_noise = srslte_chest_dl_get_noise_estimate(&ue_dl.chest);
-    if (std::isnormal(cur_noise)) {
+    if (isnormal(cur_noise)) {
       if (!phy->avg_noise) {  
         phy->avg_noise = cur_noise;          
       } else {
